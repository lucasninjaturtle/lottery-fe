import React from 'react';
import { ConnectButton } from '@rainbow-me/rainbowkit'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { ethers } from "ethers";
import { abi } from '../helpers/lottery';

//WAGMI
import {
  useAccount,
  useConnect,
  useDisconnect,
  useEnsAvatar,
  useEnsName,
  usePrepareContractWrite,
  useContractWrite,
  useWaitForTransaction,
} from 'wagmi'



export default function Home() {

  const [normalBalance, setNormalBalance] = React.useState(0)
  const [yourWallet, setYourWallet] = React.useState('')
  const [manager, setManager] = React.useState('')
  const [peopleOnLottery, setPeopleOnLottery] = React.useState(0)
  //const [contract, setContract] = React.useState('')
  const [signer, setSigner] = React.useState('')


  const { address, connector, isConnected } = useAccount()
  const { data: ensAvatar } = useEnsAvatar({ addressOrName: address })


  var provider;

  const getConnection = async () => {

    
    provider = await new ethers.providers.Web3Provider(window.ethereum)

    var log = await provider?.getBalance(address)

   
    const signerVar = await provider.getSigner();
      //setSigner(signerVar)


      
      //GET CONTRACT
      const myContract = await new ethers.Contract(contractHash, abi, provider);
      /////////////////////////////////

      //GET MANAGER
      var managerVar = await myContract.callStatic.manager()
      setManager(managerVar)
      console.log(manager)

      //////////////////////

      //PEOPLE ON LOTTERY
      var peopleOnLotteryVar = await myContract.getPlayers()
      setPeopleOnLottery(peopleOnLotteryVar.length)
      //console.log(peopleOnLottery.length)

    var correr = false

    if (correr) {

      // const address = await signer.getAddress;
      // setYourWallet(address)



      // provider.on('accountsChanged', function (accounts) {
      //     account = accounts[0];
      //     console.log(address); // Print new address
      // });



      const balance = await provider.getBalance(address)
      const balanceNormal = await ethers.utils.formatEther(balance)

      // console.log(myAccount)

      setNormalBalance(balanceNormal)

      //CONTRACT

      


    }




  }

  if (typeof window !== "undefined") {
    getConnection()
    
  }


  //FORM

  const [form, setForm] = React.useState({
    quantity: '0.001',
  });

  const onChange = ({ target }) => {
    const { name, value } = target;
    console.log(target.value)
    setForm({
      ...form,
      [name]: value
    });
  }

  ///////////////////////////////////

  //WAGMI TRANSACTION

  //const contractHash = '0xef8ac5Fe65d0BB2c9b53eF360f26150fD4B6fB7D'

  // CONTRACT 5 (ultimo)

  const contractHash = '0x291618128C6C4fc4013d3094Af5Be80824551629'

  ///////////////////////////////////////////////////

  const onSubmit = async (ev) => {
    ev.preventDefault();

    const submitContract = await new ethers.Contract(contractHash, abi, provider);

    const signerVar = await provider.getSigner();

    const LotteryWithSigner = submitContract.connect(signerVar);

    console.log(LotteryWithSigner)

    var valueString = await ethers.utils.parseUnits(form.quantity)


    //IS Wtritting ok on blockahain BUT gas is not enough??  https://goerli.etherscan.io/address/0x291618128c6c4fc4013d3094af5be80824551629
    await LotteryWithSigner.enter({
      from: yourWallet,
      value: valueString,
      gasLimit: 11000000,
      //gasPrice: 59000000,
      nonce: 1
    });



  }

  //CHECK TOTAL QUANTITY VALUE
  const todoOk = () => {
    return (
      form.quantity > 0.0001
    ) ? true : false;
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <h1 className={styles.description}>
          Balance:  {normalBalance}

          <br />
          Lottery contract: {contractHash}

          <br />
          <br />
          Wallet: {address}

          <br />
          Lottery manager: {manager}
          <br />
          People on Lottery: {peopleOnLottery}

        </h1>

        <form
          onSubmit={onSubmit}
        >

          <h2>Quantity</h2>

          <input
            className="input100"
            type="number"
            name="quantity"
            placeholder="ETH quantity"
            value={form.quantity}
            onChange={onChange}
          />
          <br />
          <button
            type="submit"
            className="login100-form-btn"
            disabled={!todoOk()}
          >
            ENTER LOTTERY
          </button>



        </form>

        {/* <EnterLottery/> */}


      </main>




    </div>
  )
}
